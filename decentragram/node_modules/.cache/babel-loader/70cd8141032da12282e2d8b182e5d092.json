{"ast":null,"code":"/**\r\n * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.\r\n *\r\n * @author Dave Longley\r\n * @author Stefan Siegl\r\n *\r\n * Copyright (c) 2012-2015 Digital Bazaar, Inc.\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n *\r\n * The ASN.1 representation of PKCS#7 is as follows\r\n * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):\r\n *\r\n * A PKCS#7 message consists of a ContentInfo on root level, which may\r\n * contain any number of further ContentInfo nested into it.\r\n *\r\n * ContentInfo ::= SEQUENCE {\r\n *   contentType                ContentType,\r\n *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL\r\n * }\r\n *\r\n * ContentType ::= OBJECT IDENTIFIER\r\n *\r\n * EnvelopedData ::= SEQUENCE {\r\n *   version                    Version,\r\n *   recipientInfos             RecipientInfos,\r\n *   encryptedContentInfo       EncryptedContentInfo\r\n * }\r\n *\r\n * EncryptedData ::= SEQUENCE {\r\n *   version                    Version,\r\n *   encryptedContentInfo       EncryptedContentInfo\r\n * }\r\n *\r\n * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\r\n *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }\r\n *\r\n * SignedData ::= SEQUENCE {\r\n *   version           INTEGER,\r\n *   digestAlgorithms  DigestAlgorithmIdentifiers,\r\n *   contentInfo       ContentInfo,\r\n *   certificates      [0] IMPLICIT Certificates OPTIONAL,\r\n *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,\r\n *   signerInfos       SignerInfos\r\n * }\r\n *\r\n * SignerInfos ::= SET OF SignerInfo\r\n *\r\n * SignerInfo ::= SEQUENCE {\r\n *   version                    Version,\r\n *   issuerAndSerialNumber      IssuerAndSerialNumber,\r\n *   digestAlgorithm            DigestAlgorithmIdentifier,\r\n *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,\r\n *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,\r\n *   encryptedDigest            EncryptedDigest,\r\n *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL\r\n * }\r\n *\r\n * EncryptedDigest ::= OCTET STRING\r\n *\r\n * Attributes ::= SET OF Attribute\r\n *\r\n * Attribute ::= SEQUENCE {\r\n *   attrType    OBJECT IDENTIFIER,\r\n *   attrValues  SET OF AttributeValue\r\n * }\r\n *\r\n * AttributeValue ::= ANY\r\n *\r\n * Version ::= INTEGER\r\n *\r\n * RecipientInfos ::= SET OF RecipientInfo\r\n *\r\n * EncryptedContentInfo ::= SEQUENCE {\r\n *   contentType                 ContentType,\r\n *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,\r\n *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL\r\n * }\r\n *\r\n * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\r\n *\r\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\r\n * for the algorithm, if any. In the case of AES and DES3, there is only one,\r\n * the IV.\r\n *\r\n * AlgorithmIdentifer ::= SEQUENCE {\r\n *    algorithm OBJECT IDENTIFIER,\r\n *    parameters ANY DEFINED BY algorithm OPTIONAL\r\n * }\r\n *\r\n * EncryptedContent ::= OCTET STRING\r\n *\r\n * RecipientInfo ::= SEQUENCE {\r\n *   version                     Version,\r\n *   issuerAndSerialNumber       IssuerAndSerialNumber,\r\n *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,\r\n *   encryptedKey                EncryptedKey\r\n * }\r\n *\r\n * IssuerAndSerialNumber ::= SEQUENCE {\r\n *   issuer                      Name,\r\n *   serialNumber                CertificateSerialNumber\r\n * }\r\n *\r\n * CertificateSerialNumber ::= INTEGER\r\n *\r\n * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\r\n *\r\n * EncryptedKey ::= OCTET STRING\r\n */\nvar forge = require('./forge');\n\nrequire('./asn1');\n\nrequire('./util'); // shortcut for ASN.1 API\n\n\nvar asn1 = forge.asn1; // shortcut for PKCS#7 API\n\nvar p7v = module.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};\nforge.pkcs7 = forge.pkcs7 || {};\nforge.pkcs7.asn1 = p7v;\nvar contentInfoValidator = {\n  name: 'ContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'ContentInfo.ContentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'ContentInfo.content',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    optional: true,\n    captureAsn1: 'content'\n  }]\n};\np7v.contentInfoValidator = contentInfoValidator;\nvar encryptedContentInfoValidator = {\n  name: 'EncryptedContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedContentInfo.contentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encAlgorithm'\n    }, {\n      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      captureAsn1: 'encParameter'\n    }]\n  }, {\n    name: 'EncryptedContentInfo.encryptedContent',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n\n    /* The PKCS#7 structure output by OpenSSL somewhat differs from what\r\n     * other implementations do generate.\r\n     *\r\n     * OpenSSL generates a structure like this:\r\n     * SEQUENCE {\r\n     *    ...\r\n     *    [0]\r\n     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\r\n     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\r\n     *       ...\r\n     * }\r\n     *\r\n     * Whereas other implementations (and this PKCS#7 module) generate:\r\n     * SEQUENCE {\r\n     *    ...\r\n     *    [0] {\r\n     *       OCTET STRING\r\n     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\r\n     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\r\n     *          ...\r\n     *    }\r\n     * }\r\n     *\r\n     * In order to support both, we just capture the context specific\r\n     * field here.  The OCTET STRING bit is removed below.\r\n     */\n    capture: 'encryptedContent',\n    captureAsn1: 'encryptedContentAsn1'\n  }]\n};\np7v.envelopedDataValidator = {\n  name: 'EnvelopedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EnvelopedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'EnvelopedData.RecipientInfos',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    captureAsn1: 'recipientInfos'\n  }].concat(encryptedContentInfoValidator)\n};\np7v.encryptedDataValidator = {\n  name: 'EncryptedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }].concat(encryptedContentInfoValidator)\n};\nvar signerValidator = {\n  name: 'SignerInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SignerInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false\n  }, {\n    name: 'SignerInfo.issuerAndSerialNumber',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'SignerInfo.issuerAndSerialNumber.issuer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'issuer'\n    }, {\n      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      capture: 'serial'\n    }]\n  }, {\n    name: 'SignerInfo.digestAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'SignerInfo.digestAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'digestAlgorithm'\n    }, {\n      name: 'SignerInfo.digestAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      constructed: false,\n      captureAsn1: 'digestParameter',\n      optional: true\n    }]\n  }, {\n    name: 'SignerInfo.authenticatedAttributes',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    optional: true,\n    capture: 'authenticatedAttributes'\n  }, {\n    name: 'SignerInfo.digestEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    capture: 'signatureAlgorithm'\n  }, {\n    name: 'SignerInfo.encryptedDigest',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'signature'\n  }, {\n    name: 'SignerInfo.unauthenticatedAttributes',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 1,\n    constructed: true,\n    optional: true,\n    capture: 'unauthenticatedAttributes'\n  }]\n};\np7v.signedDataValidator = {\n  name: 'SignedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SignedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'SignedData.DigestAlgorithms',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    captureAsn1: 'digestAlgorithms'\n  }, contentInfoValidator, {\n    name: 'SignedData.Certificates',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    optional: true,\n    captureAsn1: 'certificates'\n  }, {\n    name: 'SignedData.CertificateRevocationLists',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 1,\n    optional: true,\n    captureAsn1: 'crls'\n  }, {\n    name: 'SignedData.SignerInfos',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    capture: 'signerInfos',\n    optional: true,\n    value: [signerValidator]\n  }]\n};\np7v.recipientInfoValidator = {\n  name: 'RecipientInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'RecipientInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'RecipientInfo.issuerAndSerial',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'RecipientInfo.issuerAndSerial.issuer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'issuer'\n    }, {\n      name: 'RecipientInfo.issuerAndSerial.serialNumber',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      capture: 'serial'\n    }]\n  }, {\n    name: 'RecipientInfo.keyEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encAlgorithm'\n    }, {\n      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      constructed: false,\n      captureAsn1: 'encParameter'\n    }]\n  }, {\n    name: 'RecipientInfo.encryptedKey',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encKey'\n  }]\n};","map":null,"metadata":{},"sourceType":"script"}