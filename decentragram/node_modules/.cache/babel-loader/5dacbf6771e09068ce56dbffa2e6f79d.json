{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:\\\\College\\\\3Decent\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\College\\\\3Decent\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar constants = require('./constants');\n\nvar MT = constants.MT;\nvar SIMPLE = constants.SIMPLE;\nvar SYMS = constants.SYMS;\n/**\r\n * A CBOR Simple Value that does not map onto a known constant.\r\n */\n\nvar Simple =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Creates an instance of Simple.\r\n   *\r\n   * @param {integer} value - the simple value's integer value\r\n   */\n  function Simple(value) {\n    _classCallCheck(this, Simple);\n\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + typeof value);\n    }\n\n    if (value < 0 || value > 255 || (value | 0) !== value) {\n      throw new Error('value must be a small positive integer: ' + value);\n    }\n\n    this.value = value;\n  }\n  /**\r\n   * Debug string for simple value\r\n   *\r\n   * @returns {string} simple(value)\r\n   */\n\n\n  _createClass(Simple, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'simple(' + this.value + ')';\n    }\n    /**\r\n     * Debug string for simple value\r\n     *\r\n     * @returns {string} simple(value)\r\n     */\n\n  }, {\n    key: \"inspect\",\n    value: function inspect() {\n      return 'simple(' + this.value + ')';\n    }\n    /**\r\n     * Push the simple value onto the CBOR stream\r\n     *\r\n     * @param {cbor.Encoder} gen The generator to push onto\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"encodeCBOR\",\n    value: function encodeCBOR(gen) {\n      return gen._pushInt(this.value, MT.SIMPLE_FLOAT);\n    }\n    /**\r\n     * Is the given object a Simple?\r\n     *\r\n     * @param {any} obj - object to test\r\n     * @returns {bool} - is it Simple?\r\n     */\n\n  }], [{\n    key: \"isSimple\",\n    value: function isSimple(obj) {\n      return obj instanceof Simple;\n    }\n    /**\r\n     * Decode from the CBOR additional information into a JavaScript value.\r\n     * If the CBOR item has no parent, return a \"safe\" symbol instead of\r\n     * `null` or `undefined`, so that the value can be passed through a\r\n     * stream in object mode.\r\n     *\r\n     * @param {Number} val - the CBOR additional info to convert\r\n     * @param {bool} hasParent - Does the CBOR item have a parent?\r\n     * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\r\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(val, hasParent) {\n      if (hasParent == null) {\n        hasParent = true;\n      }\n\n      switch (val) {\n        case SIMPLE.FALSE:\n          return false;\n\n        case SIMPLE.TRUE:\n          return true;\n\n        case SIMPLE.NULL:\n          if (hasParent) {\n            return null;\n          } else {\n            return SYMS.NULL;\n          }\n\n        case SIMPLE.UNDEFINED:\n          if (hasParent) {\n            return undefined;\n          } else {\n            return SYMS.UNDEFINED;\n          }\n\n        case -1:\n          if (!hasParent) {\n            throw new Error('Invalid BREAK');\n          }\n\n          return SYMS.BREAK;\n\n        default:\n          return new Simple(val);\n      }\n    }\n  }]);\n\n  return Simple;\n}();\n\nmodule.exports = Simple;","map":null,"metadata":{},"sourceType":"script"}