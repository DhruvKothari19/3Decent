{"ast":null,"code":"/**\r\n * Javascript implementation of mask generation function MGF1.\r\n *\r\n * @author Stefan Siegl\r\n * @author Dave Longley\r\n *\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n * Copyright (c) 2014 Digital Bazaar, Inc.\r\n */\nvar forge = require('./forge');\n\nrequire('./util');\n\nforge.mgf = forge.mgf || {};\nvar mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};\n/**\r\n * Creates a MGF1 mask generation function object.\r\n *\r\n * @param md the message digest API to use (eg: forge.md.sha1.create()).\r\n *\r\n * @return a mask generation function object.\r\n */\n\nmgf1.create = function (md) {\n  var mgf = {\n    /**\r\n     * Generate mask of specified length.\r\n     *\r\n     * @param {String} seed The seed for mask generation.\r\n     * @param maskLen Number of bytes to generate.\r\n     * @return {String} The generated mask.\r\n     */\n    generate: function generate(seed, maskLen) {\n      /* 2. Let T be the empty octet string. */\n      var t = new forge.util.ByteBuffer();\n      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */\n\n      var len = Math.ceil(maskLen / md.digestLength);\n\n      for (var i = 0; i < len; i++) {\n        /* a. Convert counter to an octet string C of length 4 octets */\n        var c = new forge.util.ByteBuffer();\n        c.putInt32(i);\n        /* b. Concatenate the hash of the seed mgfSeed and C to the octet\r\n         * string T: */\n\n        md.start();\n        md.update(seed + c.getBytes());\n        t.putBuffer(md.digest());\n      }\n      /* Output the leading maskLen octets of T as the octet string mask. */\n\n\n      t.truncate(t.length() - maskLen);\n      return t.getBytes();\n    }\n  };\n  return mgf;\n};","map":null,"metadata":{},"sourceType":"script"}