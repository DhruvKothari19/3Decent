{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:\\\\College\\\\3Decent\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:\\\\College\\\\3Decent\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar multihashing = require('multihashing-async');\n\nvar multicodec = require('multicodec'); // binary resolver\n\n\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multicodec.SHA2_256,\n  resolver: {\n    /**\r\n     * Resolves a path within a Raw block.\r\n     *\r\n     * Always returns the raw data as value without any remainderPath.\r\n     *\r\n     * @param {Buffer} binaryBlob - Binary representation of a PB block\r\n     * @param {string} [path='/'] - Path that should be resolved (that value is ignored)\r\n     * @returns {Object} result - Result of the path it it was resolved successfully\r\n     * @returns {*} result.value - The raw data\r\n     * @returns {string} result.remainderPath - An empty string\r\n     */\n    resolve: function resolve(binaryBlob, path) {\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      };\n    },\n\n    /**\r\n     * Return all available paths of a block.\r\n     *\r\n     * @generator\r\n     * @param {Buffer} binaryBlob - The raw data\r\n     * @returns {Object} - Finished generator with `done: true`\r\n     */\n    tree: function tree(binaryBlob) {\n      return {\n        done: true\n      };\n    }\n  },\n  util: {\n    deserialize: function deserialize(data) {\n      return data;\n    },\n    serialize: function serialize(data) {\n      return data;\n    },\n\n    /**\r\n     * Calculate the CID of the binary blob.\r\n     *\r\n     * @param {Object} binaryBlob - Encoded IPLD Node\r\n     * @param {Object} [userOptions] - Options to create the CID\r\n     * @param {number} [userOptions.cidVersion=1] - CID version number\r\n     * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\r\n     * @returns {Promise.<CID>}\r\n     */\n    cid: function () {\n      var _cid = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(binaryBlob, userOptions) {\n        var defaultOptions, options, multihash, codecName, cid;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                defaultOptions = {\n                  cidVersion: 1,\n                  hashAlg: module.exports.defaultHashAlg\n                };\n                options = Object.assign(defaultOptions, userOptions);\n                _context.next = 4;\n                return multihashing(binaryBlob, options.hashAlg);\n\n              case 4:\n                multihash = _context.sent;\n                codecName = multicodec.print[module.exports.codec];\n                cid = new CID(options.cidVersion, codecName, multihash);\n                return _context.abrupt(\"return\", cid);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function cid(_x, _x2) {\n        return _cid.apply(this, arguments);\n      }\n\n      return cid;\n    }()\n  }\n};","map":null,"metadata":{},"sourceType":"script"}