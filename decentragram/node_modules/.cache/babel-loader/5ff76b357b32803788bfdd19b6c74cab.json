{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = whilst;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _slice = require('./internal/slice');\n\nvar _slice2 = _interopRequireDefault(_slice);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\r\n * stopped, or an error occurs.\r\n *\r\n * @name whilst\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Function} test - synchronous truth test to perform before each\r\n * execution of `iteratee`. Invoked with ().\r\n * @param {AsyncFunction} iteratee - An async function which is called each time\r\n * `test` passes. Invoked with (callback).\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\r\n * will be passed an error and any arguments passed to the final `iteratee`'s\r\n * callback. Invoked with (err, [results]);\r\n * @returns undefined\r\n * @example\r\n *\r\n * var count = 0;\r\n * async.whilst(\r\n *     function() { return count < 5; },\r\n *     function(callback) {\r\n *         count++;\r\n *         setTimeout(function() {\r\n *             callback(null, count);\r\n *         }, 1000);\r\n *     },\r\n *     function (err, n) {\r\n *         // 5 seconds have passed, n = 5\r\n *     }\r\n * );\r\n */\n\n\nfunction whilst(test, iteratee, callback) {\n  callback = (0, _onlyOnce2.default)(callback || _noop2.default);\n\n  var _iteratee = (0, _wrapAsync2.default)(iteratee);\n\n  if (!test()) return callback(null);\n\n  var next = function next(err\n  /*, ...args*/\n  ) {\n    if (err) return callback(err);\n    if (test()) return _iteratee(next);\n    var args = (0, _slice2.default)(arguments, 1);\n    callback.apply(null, [null].concat(args));\n  };\n\n  _iteratee(next);\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}