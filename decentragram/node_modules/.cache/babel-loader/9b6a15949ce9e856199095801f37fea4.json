{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (tasks, callback) {\n  callback = (0, _once2.default)(callback || _noop2.default);\n  if (!(0, _isArray2.default)(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n  if (!tasks.length) return callback();\n  var taskIndex = 0;\n\n  function nextTask(args) {\n    var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);\n    args.push((0, _onlyOnce2.default)(next));\n    task.apply(null, args);\n  }\n\n  function next(err\n  /*, ...args*/\n  ) {\n    if (err || taskIndex === tasks.length) {\n      return callback.apply(null, arguments);\n    }\n\n    nextTask((0, _slice2.default)(arguments, 1));\n  }\n\n  nextTask([]);\n};\n\nvar _isArray = require('lodash/isArray');\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _once = require('./internal/once');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _slice = require('./internal/slice');\n\nvar _slice2 = _interopRequireDefault(_slice);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = exports['default'];\n/**\r\n * Runs the `tasks` array of functions in series, each passing their results to\r\n * the next in the array. However, if any of the `tasks` pass an error to their\r\n * own callback, the next function is not executed, and the main `callback` is\r\n * immediately called with the error.\r\n *\r\n * @name waterfall\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\r\n * to run.\r\n * Each function should complete with any number of `result` values.\r\n * The `result` values will be passed as arguments, in order, to the next task.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed. This will be passed the results of the last task's\r\n * callback. Invoked with (err, [results]).\r\n * @returns undefined\r\n * @example\r\n *\r\n * async.waterfall([\r\n *     function(callback) {\r\n *         callback(null, 'one', 'two');\r\n *     },\r\n *     function(arg1, arg2, callback) {\r\n *         // arg1 now equals 'one' and arg2 now equals 'two'\r\n *         callback(null, 'three');\r\n *     },\r\n *     function(arg1, callback) {\r\n *         // arg1 now equals 'three'\r\n *         callback(null, 'done');\r\n *     }\r\n * ], function (err, result) {\r\n *     // result now equals 'done'\r\n * });\r\n *\r\n * // Or, with named functions:\r\n * async.waterfall([\r\n *     myFirstFunction,\r\n *     mySecondFunction,\r\n *     myLastFunction,\r\n * ], function (err, result) {\r\n *     // result now equals 'done'\r\n * });\r\n * function myFirstFunction(callback) {\r\n *     callback(null, 'one', 'two');\r\n * }\r\n * function mySecondFunction(arg1, arg2, callback) {\r\n *     // arg1 now equals 'one' and arg2 now equals 'two'\r\n *     callback(null, 'three');\r\n * }\r\n * function myLastFunction(arg1, callback) {\r\n *     // arg1 now equals 'three'\r\n *     callback(null, 'done');\r\n * }\r\n */","map":null,"metadata":{},"sourceType":"script"}