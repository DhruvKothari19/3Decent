{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _setImmediate = require('./internal/setImmediate');\n/**\r\n * Calls `callback` on a later loop around the event loop. In Node.js this just\r\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\r\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\r\n * priority events may precede the execution of `callback`.\r\n *\r\n * This is used internally for browser-compatibility purposes.\r\n *\r\n * @name nextTick\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\r\n * @category Util\r\n * @param {Function} callback - The function to call on a later loop around\r\n * the event loop. Invoked with (args...).\r\n * @param {...*} args... - any number of additional arguments to pass to the\r\n * callback on the next tick.\r\n * @example\r\n *\r\n * var call_order = [];\r\n * async.nextTick(function() {\r\n *     call_order.push('two');\r\n *     // call_order now equals ['one','two']\r\n * });\r\n * call_order.push('one');\r\n *\r\n * async.setImmediate(function (a, b, c) {\r\n *     // a, b, and c equal 1, 2, and 3\r\n * }, 1, 2, 3);\r\n */\n\n\nvar _defer;\n\nif (_setImmediate.hasNextTick) {\n  _defer = process.nextTick;\n} else if (_setImmediate.hasSetImmediate) {\n  _defer = setImmediate;\n} else {\n  _defer = _setImmediate.fallback;\n}\n\nexports.default = (0, _setImmediate.wrap)(_defer);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}