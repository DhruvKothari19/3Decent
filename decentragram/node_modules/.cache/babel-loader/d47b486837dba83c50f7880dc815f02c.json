{"ast":null,"code":"'use strict';\n/**\r\n * A CBOR tagged item, where the tag does not have semantics specified at the\r\n * moment, or those semantics threw an error during parsing. Typically this will\r\n * be an extension point you're not yet expecting.\r\n */\n\nvar _classCallCheck = require(\"D:\\\\College\\\\3Decent\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\College\\\\3Decent\\\\decentragram\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Tagged =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Creates an instance of Tagged.\r\n   *\r\n   * @param {Number} tag - the number of the tag\r\n   * @param {any} value - the value inside the tag\r\n   * @param {Error} err - the error that was thrown parsing the tag, or null\r\n   */\n  function Tagged(tag, value, err) {\n    _classCallCheck(this, Tagged);\n\n    this.tag = tag;\n    this.value = value;\n    this.err = err;\n\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + typeof this.tag + ')');\n    }\n\n    if (this.tag < 0 || (this.tag | 0) !== this.tag) {\n      throw new Error('Tag must be a positive integer: ' + this.tag);\n    }\n  }\n  /**\r\n   * Convert to a String\r\n   *\r\n   * @returns {String} string of the form '1(2)'\r\n   */\n\n\n  _createClass(Tagged, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.tag, \"(\").concat(JSON.stringify(this.value), \")\");\n    }\n    /**\r\n     * Push the simple value onto the CBOR stream\r\n     *\r\n     * @param {cbor.Encoder} gen The generator to push onto\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"encodeCBOR\",\n    value: function encodeCBOR(gen) {\n      gen._pushTag(this.tag);\n\n      return gen.pushAny(this.value);\n    }\n    /**\r\n     * If we have a converter for this type, do the conversion.  Some converters\r\n     * are built-in.  Additional ones can be passed in.  If you want to remove\r\n     * a built-in converter, pass a converter in whose value is 'null' instead\r\n     * of a function.\r\n     *\r\n     * @param {Object} converters - keys in the object are a tag number, the value\r\n     *   is a function that takes the decoded CBOR and returns a JavaScript value\r\n     *   of the appropriate type.  Throw an exception in the function on errors.\r\n     * @returns {any} - the converted item\r\n     */\n\n  }, {\n    key: \"convert\",\n    value: function convert(converters) {\n      var er, f;\n      f = converters != null ? converters[this.tag] : undefined;\n\n      if (typeof f !== 'function') {\n        f = Tagged['_tag' + this.tag];\n\n        if (typeof f !== 'function') {\n          return this;\n        }\n      }\n\n      try {\n        return f.call(Tagged, this.value);\n      } catch (error) {\n        er = error;\n        this.err = er;\n        return this;\n      }\n    }\n  }]);\n\n  return Tagged;\n}();\n\nmodule.exports = Tagged;","map":null,"metadata":{},"sourceType":"script"}